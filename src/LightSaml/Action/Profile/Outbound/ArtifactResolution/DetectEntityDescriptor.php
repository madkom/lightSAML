<?php
/**
 * Created by PhpStorm.
 * User: mhytry
 * Date: 14.11.2016
 * Time: 14:52.
 */
namespace LightSaml\Action\Profile\Outbound\ArtifactResolution;

use LightSaml\Action\Profile\AbstractProfileAction;
use LightSaml\Context\Profile\ProfileContext;
use LightSaml\Error\LightSamlSecurityException;
use LightSaml\Meta\TrustOptions\TrustOptions;
use LightSaml\Model\Metadata\EntityDescriptor;
use LightSaml\Store\EntityDescriptor\EntityDescriptorStoreInterface;
use LightSaml\Store\TrustOptions\TrustOptionsStoreInterface;
use Psr\Log\LoggerInterface;

class DetectEntityDescriptor extends AbstractProfileAction
{
    /**
     * @var EntityDescriptorStoreInterface
     */
    private $entityDescriptorStore;

    /**
     * @var TrustOptionsStoreInterface
     */
    private $trustOptionsStore;

    /**
     * @param LoggerInterface                $logger
     * @param EntityDescriptorStoreInterface $entityDescriptorStore
     * @param TrustOptionsStoreInterface     $trustOptionsStore
     */
    public function __construct(LoggerInterface $logger, EntityDescriptorStoreInterface $entityDescriptorStore, TrustOptionsStoreInterface $trustOptionsStore)
    {
        parent::__construct($logger);

        $this->entityDescriptorStore = $entityDescriptorStore;
        $this->trustOptionsStore = $trustOptionsStore;
    }

    protected function doExecute(ProfileContext $context)
    {
        $artifact = $context->getInboundContext()->getArtifact();
        $entityDescriptor = $this->findMatchingEntityDescriptor($artifact->getSourceId());

        $context->getPartyEntityContext()
            ->setEntityDescriptor($entityDescriptor)
            ->setTrustOptions(
                $this->trustOptionsStore->get($entityDescriptor->getEntityID()) ?: new TrustOptions()
            )
        ;
    }

    /**
     * @param $hashedEntityId
     *
     * @return EntityDescriptor
     *
     * @throws LightSamlSecurityException
     */
    private function findMatchingEntityDescriptor($hashedEntityId)
    {
        /** @var EntityDescriptor $entityDescriptor */
        foreach ($this->entityDescriptorStore->all() as $entityDescriptor) {
            if (sha1($entityDescriptor->getEntityID()) === $hashedEntityId) {
                return $entityDescriptor;
            }
        }

        throw new LightSamlSecurityException('Artifact is not generated by known Identity Provider '.$hashedEntityId);
    }
}
